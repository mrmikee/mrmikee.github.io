[{"authors":["admin"],"categories":null,"content":"Michael Cone is a Software Engineer at AT\u0026amp;T.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://www.mikecone.us/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Michael Cone is a Software Engineer at AT\u0026amp;T.","tags":null,"title":"Michael Cone","type":"authors"},{"authors":[],"categories":[],"content":"You can\u0026rsquo;t believe how easy this post was to create.\nimport os print(os.path) class person(object): \u0026quot;\u0026quot;\u0026quot;\u0026quot;This is a person Class for Users\u0026quot;\u0026quot;\u0026quot; def __init__(self, fname, lname, email): \u0026quot;\u0026quot;\u0026quot;create a new person\u0026quot;\u0026quot;\u0026quot; pass def del(self, id): \u0026quot;\u0026quot;\u0026quot;delete an employee\u0026quot;\u0026quot;\u0026quot; pass def email(self, id): \u0026quot;\u0026quot;\u0026quot;send email to person\u0026quot;\u0026quot;\u0026quot; pass if __name__ === '__main__': p = person(\u0026quot;John\u0026quot;, \u0026quot;Smith\u0026quot;, \u0026quot;jm@me.com\u0026quot;) print(p)  ","date":1585572234,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585572234,"objectID":"4e58f0f5dc4ea28047c31bf9170e57fe","permalink":"https://www.mikecone.us/post/home_projects/post1/","publishdate":"2020-03-30T12:43:54Z","relpermalink":"/post/home_projects/post1/","section":"post","summary":"This is the Summary of my post1.","tags":[],"title":"My Test Post 1","type":"post"},{"authors":[],"categories":["test"],"content":"This is the body of my test post.\n learning developing testing  #!/bin/bash echo $PWD docker run test  Finished!\n","date":1585572234,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585572234,"objectID":"b6d48547655707d290bf40d9b844c175","permalink":"https://www.mikecone.us/post/home_projects/post2/","publishdate":"2020-03-30T12:43:54Z","relpermalink":"/post/home_projects/post2/","section":"post","summary":"This is the Summary of my post.","tags":["test","python"],"title":"My Test Post 2","type":"post"},{"authors":[],"categories":["IOT"],"content":"I built a WiFi sensor for my attic to monitor temperature, humidity, and pressure for less than $10 using\n  Wemos D1 Mini clone  BME280 (I2C temp/humidity sensor)  and with the home automation software Home Assistant with the EspHome plugin.\nHere is my attic sensor\u0026rsquo;s display in Home Assistant:\n Hardware NOTICE: The GND pin of the sensor is NOT connected to pin D8 which is why the second pin has been removed from the header assembly. I used a wire to connect ground from accross the board.\n Case As always I have to find another reason to justify the purchase of my 3D printer. So I searched Thingiverse and found where \u0026ldquo;Spiritdude\u0026rdquo; had already created a nice case for the D1 Mini board, but the sensor location created problems for the left side mouting location, so I imported the STL file into SketchUp and moved the leg more to the top of the case.\nHere is my modified version of Spiritdude\u0026rsquo;s case if you want to print your own.\n Software Here is my \u0026ldquo;Home Assistant ESP-Home\u0026rdquo; yaml config file for the Multi-Sensor.\nesphome: name: attic_multisensor_01 platform: ESP8266 board: d1_mini wifi: ssid: !secret wifi_ssid password: !secret wifi_pass captive_portal: # Enable logging logger: # Enable Home Assistant API api: # Enable Over The Air updates ota: # Create BME Sensor on I2C i2c: sda: D6 scl: D7 # Scan I2C address to look for sensors scan: True sensor: - platform: bme280 # Default address 0x77 address: 0x76 temperature: name: \u0026quot;Attic Temperature\u0026quot; id: attic_bme280_temperature filters: - lambda: return x * (9.0/5.0) + 32.0; unit_of_measurement: \u0026quot;Â°F\u0026quot; pressure: name: \u0026quot;Attic Pressure\u0026quot; id: attic_bme280_pressure humidity: name: \u0026quot;Attic Humidity\u0026quot; id: attic_bme280_humidity filters: - calibrate_linear: # Map 0.0 (from sensor) to 0.0 (true value) - 0.0 -\u0026gt; 0.0 - 32.7 -\u0026gt; 55.7 update_interval: 15s  ","date":1577882634,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577882634,"objectID":"f2ac5d4c0d6753814a522ee52b14c839","permalink":"https://www.mikecone.us/post/home_projects/esp_tmp_humid_sensor/","publishdate":"2020-01-01T12:43:54Z","relpermalink":"/post/home_projects/esp_tmp_humid_sensor/","section":"post","summary":"WiFi Temp Humidity and Pressure monitoring with ESP8266","tags":["Home Automation","esp8266","3d print"],"title":"ESP8266 Temp Multi-Sensor","type":"post"}]