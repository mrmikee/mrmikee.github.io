[{"authors":["admin"],"categories":null,"content":"Michael Cone is a Software Engineer at AT\u0026amp;T.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://www.mikecone.us/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Michael Cone is a Software Engineer at AT\u0026amp;T.","tags":null,"title":"Michael Cone","type":"authors"},{"authors":[],"categories":[],"content":"Using ssh, VNC, and OpenVPN to install Kodi on my dad\u0026rsquo;s Raspberry Pi from 245 miles away.\nThis is not a how-to install Kodi, this is just me helping my dad and having some fun in the process playing with technology and leaving myself a reminder of how I did it.\nWhy? My dad wanted a media player to play his recorded shows that were saved on his NAS, but he wanted to play them on his den tv. That\u0026rsquo;s easy enough to setup if you just live across town from each other, but we are a 5 hour drive apart. So I decided to take advantage of our site to site VPN. I setup a OpenVPN in our routers a few years back so I could have an off site backup of our kids photos without using the \u0026ldquo;cloud\u0026rdquo;.\nProblem I started this by trying the VNC server included with Raspbian, I was dissapointed to discover that when Kodi launched all I got was a black screen. Turns out Kodi doesn\u0026rsquo;t uses X11 at all so the video was not \u0026ldquo;redirected\u0026rdquo; across the VNC connection.\nThe solution Using a different VNC server called dispmanx_vnc and NOT running the GUI at all.\nI found inspiration on the VNC server setup from this OSMC Support Article.\nSteps I took on Raspbian # ssh into the RPi # disable the GUI sudo rasbpi-config # install the compiler to build the code into an executable sudo apt-get install build-essential libvncserver-dev libconfig++-dev unzip # download and unpack the VNC source code wget https://github.com/patrikolausson/dispmanx_vnc/archive/master.zip # unzip the compressed file unzip master.zip # change to the source code folder cd dispmanx_vnc-master/ # compile the source into a binary by running make make # DONE!  While I didn\u0026rsquo;t install a LAMP stack nor did I completely follow his steps, I did find great information from Leow Kah Man\u0026rsquo;s blog.\nYou can read how to:\n \u0026ldquo;Disable booting to desktop\u0026rdquo; \u0026ldquo;Installing Kodi\u0026rdquo; \u0026ldquo;Run Kodi on startup\u0026rdquo;  # Run Kodi on startup sudo crontab -e @reboot kodi --standalone  Secret revealed! Now while it was not necessary, I was actually using a Magewell HDMI to USB capture device and Team Viewer to view the HDMI output of the Raspberry Pi so I could confirm what was being sent from the RPi to the TV was the same I was seeing in the VNC client.\n ","date":1588459434,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588459434,"objectID":"27837d7a8f5037212e26ab1494e8c72b","permalink":"https://www.mikecone.us/post/home_projects/kodi_install_over_vnc/","publishdate":"2020-05-02T22:43:54Z","relpermalink":"/post/home_projects/kodi_install_over_vnc/","section":"post","summary":"Using ssh, VNC, and OpenVPN to install Kodi on my dad's Raspberry Pi from 245 miles away.  This is not a how-to install Kodi, this is just me helping my dad and having some fun in the process playing with technology and leaving myself a reminder of how I did it.","tags":["Raspberry Pi","Kodi","VNC"],"title":"Raspberri Pi Kodi remote install","type":"post"},{"authors":[],"categories":["IOT"],"content":"I built a WiFi sensor for my attic to monitor temperature, humidity, and pressure for less than $10 using\n  Wemos D1 Mini clone  BME280 (I2C temp/humidity sensor)  and with the home automation software Home Assistant with the EspHome plugin.\nHere is my attic sensor\u0026rsquo;s display in Home Assistant:\n Hardware NOTICE: The GND pin of the sensor is NOT connected to pin D8 which is why the second pin has been removed from the header assembly. I used a wire to connect ground from accross the board.\n Case As always I have to find another reason to justify the purchase of my 3D printer. So I searched Thingiverse and found where \u0026ldquo;Spiritdude\u0026rdquo; had already created a nice case for the D1 Mini board, but the sensor location created problems for the left side mouting location, so I imported the STL file into SketchUp and moved the leg more to the top of the case.\nHere is my modified version of Spiritdude\u0026rsquo;s case if you want to print your own.\n Software Here is my \u0026ldquo;Home Assistant ESP-Home\u0026rdquo; yaml config file for the Multi-Sensor.\nesphome: name: attic_multisensor_01 platform: ESP8266 board: d1_mini wifi: ssid: !secret wifi_ssid password: !secret wifi_pass captive_portal: # Enable logging logger: # Enable Home Assistant API api: # Enable Over The Air updates ota: # Create BME Sensor on I2C i2c: sda: D6 scl: D7 # Scan I2C address to look for sensors scan: True sensor: - platform: bme280 # Default address 0x77 address: 0x76 temperature: name: \u0026quot;Attic Temperature\u0026quot; id: attic_bme280_temperature filters: - lambda: return x * (9.0/5.0) + 32.0; unit_of_measurement: \u0026quot;°F\u0026quot; pressure: name: \u0026quot;Attic Pressure\u0026quot; id: attic_bme280_pressure humidity: name: \u0026quot;Attic Humidity\u0026quot; id: attic_bme280_humidity filters: - calibrate_linear: # Map 0.0 (from sensor) to 0.0 (true value) - 0.0 -\u0026gt; 0.0 - 32.7 -\u0026gt; 55.7 update_interval: 15s  ","date":1577882634,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577882634,"objectID":"f2ac5d4c0d6753814a522ee52b14c839","permalink":"https://www.mikecone.us/post/home_projects/esp_tmp_humid_sensor/","publishdate":"2020-01-01T12:43:54Z","relpermalink":"/post/home_projects/esp_tmp_humid_sensor/","section":"post","summary":"WiFi Temp Humidity and Pressure monitoring with ESP8266","tags":["Home Automation","esp8266","3d print"],"title":"ESP8266 Temp Multi-Sensor","type":"post"},{"authors":[],"categories":["IOT"],"content":"I built a second WiFi sensor, this time for my aquarium to monitor the tank water temperature.\nThis like my Attic Multi-Sensor uses the home automation software Home Assistant with the EspHome plugin.\nInstead of reinventing the wheel, I\u0026rsquo;m just going to refer you to the great Dallas Temperature documentation at the ESPHome website for this sensor for you to see how I went about building mine.\nHere is a screenshot of of my water temperature sensor\u0026rsquo;s graph in Home Assistant:\n Hardware   Wemos D1 Mini clone  DS18N20 temp sensor   Case Here are my aquarium sensor case 3D print files and some images below of how the one I built looks.\n Software Here is my \u0026ldquo;Home Assistant : ESP-Home\u0026rdquo; yaml config file for my aquarium temp sensor.\n# D1-Mini CLONE w/attached DS18N20 waterproof Temp probe # substitutions: devicename: aquarium_temp_01 upper_devicename: Aquarium 20gal esphome: name: ${devicename} platform: ESP8266 board: d1_mini wifi: ssid: !secret wifi_ssid password: !secret wifi_pass # Enable fallback hotspot (captive portal) in case wifi connection fails ap: ssid: \u0026quot;${devicename}\u0026quot; password: !secret ap_fallback_pwd captive_portal: # Enable logging logger: # Enable Home Assistant API api: # Enable Over The Air updates ota: safe_mode: True # Example configuration entry dallas: - pin: GPIO4 update_interval: 15s sensor: - platform: dallas address: 0xCE041662D2CFFF28 name: ${devicename}_temp filters: - lambda: return x * (9.0/5.0) + 32.0; unit_of_measurement: \u0026quot;°F\u0026quot; - platform: wifi_signal name: ${devicename}_wifi_signal update_interval: 30s - platform: uptime name: ${devicename}_uptime binary_sensor: - platform: status name: ${upper_devicename} Status id: ${devicename}_status text_sensor: - platform: version name: ${devicename}_esphome_version  ","date":1577882634,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577882634,"objectID":"4dc95dfaa595c781b517a41ea1d65e20","permalink":"https://www.mikecone.us/post/home_projects/esp_aquarium_temp_sensor/","publishdate":"2020-01-01T12:43:54Z","relpermalink":"/post/home_projects/esp_aquarium_temp_sensor/","section":"post","summary":"Monitor water temperature in my aquarium.","tags":["Home Automation","esp8266","3d print"],"title":"WiFi Aquarium Water Temp Sensor","type":"post"},{"authors":null,"categories":null,"content":"For a while now my father has been after me to help him build a system that will allow him to remotely operate his ham radio shack. I have used this project as my motivation to expand my comfort zone and to learn more about some of the technologies I have taken for granted for years.\n VPN TCP/IP networking serial communications audio interfaces and more\u0026hellip;  As I post articles on my site I will associate them to this project as appropriate for others to use as a reference and to help keep the bigger picture in focus.\nMore to come\u0026hellip;\n","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"04a74a986ab1c28ae315189017a9136c","permalink":"https://www.mikecone.us/project/remote-base/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/project/remote-base/","section":"project","summary":"Building a solution for my dad to operate his amateur radio equipment remotely.","tags":["Ham Radio","Remote Base"],"title":"Remote Base","type":"project"},{"authors":[],"categories":[],"content":"My K8s setup I\u0026rsquo;m using a Linux virtual machine for executing the Ansible plays.\nFrom a previous project where some friends and I were experimenting with pFsense routers at home, I had purchased a few HP-T620plus thin clients so I have chosen to use those for this project.\nThe cluster is comprised of 5 HP-T620plus thin clients. Each has 4Gig RAM, 16Gig M.2 SSD storage, and a quad core processor @ 2Ghz. So this is not a production environment to say the least, but it should allow me to experiment with the API\u0026rsquo;s and learn k8s without having to pay monthly for something I really don\u0026rsquo;t need everyday. Plus, I get the satisfaction and \u0026ldquo;geek cred\u0026rdquo; for running it on bare metal at home.\nEach node is running Ubuntu 18.04 server that was installed from the Ubuntu \u0026ldquo;mini.iso\u0026rdquo; that I flashed to a usb thumb drive.\nI configured each node\u0026rsquo;s network interface as DHCP, but gave them Static IP Leases on my pFsense router.\n Install notes: Clone the KubeSpray project # make a directory to hold the project and 'cd' into it. mkdir ansible_projects cd ansible_projects # clone the github repo git clone https://github.com/kubernetes-sigs/kubespray.git ./kubespray cd kubespray  Configure laptop Python Virtual Environment python3 -m venv env source env/bin/activate # to activate the new virtual env. pip install --upgrade pip pip install -r requirements.txt  If you are not familiar with virtual environments check this out.\nCopy SSH key to all k8s nodes The \u0026ldquo;user\u0026rdquo; needs SUDO rights on each k8s node.\n# from the laptop console ssh-copy-id user@node01 ssh user@node01 sudo su # to confirm sudo rights are configured. # repeat for all nodes, as necessary  Enable IP4 forwarding Hint: If you are familiar with Ansible Ad-Hoc commands and you have your inventory file configured already, you could do this using\n\u0026ldquo;ansible all -m shell -a 'sysctl -w net.ipv4.ip_forward=1' --ask-become --become\u0026rdquo;.\n# check if IP_Forward is already enabled. # '0' is off, '1' is on. cat /proc/sys/net/ipv4/ip_forward # temp enable ip_forward sysctl -w net.ipv4.ip_forward=1 # turn on temp # --------- # permanent enable # --------- # edit /etc/sysctl.conf # add line \u0026quot;net.ipv4.ip_forward=1\u0026quot; sysctl -p # to enable after file save.  Ansible Config Modified the example given by KubeSpray in the \u0026ldquo;inventory/sample\u0026rdquo; folder.\ninventory.ini file:\n# ## Configure 'ip' variable to bind kubernetes services on a # ## different ip than the default iface # ## We should set etcd_member_name for etcd cluster. The node that is not a etcd member do not need to set the value, or can set the empty string value. [all] hp-dock02 ansible_host=10.20.30.2 etcd_member_name=etcd2 hp-dock03 ansible_host=10.20.30.3 etcd_member_name=etcd3 hp-dock04 ansible_host=10.20.30.4 etcd_member_name=etcd4 hp-dock05 ansible_host=10.20.30.5 etcd_member_name=etcd5 hp-dock06 ansible_host=10.20.30.6 etcd_member_name=etcd6 # ## configure a bastion host if your nodes are not directly reachable # bastion ansible_host=x.x.x.x ansible_user=some_user [kube-master] hp-dock02 hp-dock03 [etcd] hp-dock02 hp-dock03 hp-dock04 [kube-node] hp-dock03 hp-dock04 hp-dock05 hp-dock06 [k8s-cluster:children] kube-master kube-node  Run the playbook ansible-playbook -i ./inventory.ini cluster.yml -b -v -K  NOTE: Be prepared to wait a while for this to complete!\nVerify cluster is up # log into one of the MASTER nodes ssh user@master-node # become ROOT sudo su # get cluster status kubectl get nodes  # ---EXAMPLE--- root@hp-dock03:~# kubectl get nodes NAME STATUS ROLES AGE VERSION hp-dock02 Ready master 35m v1.15.0 hp-dock03 Ready master 33m v1.15.0 hp-dock04 Ready \u0026lt;none\u0026gt; 32m v1.15.0 hp-dock05 Ready \u0026lt;none\u0026gt; 32m v1.15.0 hp-dock06 Ready \u0026lt;none\u0026gt; 32m v1.15.0 root@hp-dock03:~#  YES! It worked. Other things we can try:\nkubectl get pods --all-namespaces   Now to install the k8s Web Dashboard # as ROOT on a MASTER node kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta1/aio/deploy/recommended.yaml # then launch the proxy kubectl proxy --address 0.0.0.0 --accept-hosts '.*' # access the web ui from my laptop with # http://hp-dock03:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login  ERROR! But of course there is an authentication issue. A missing ADMIN user that was not created on install for some reason.\n create Admin acct  HowTo scroll down to the section on setup Kube Daskboard.\nCreate a file called: dashboard-adminuser.yaml --- apiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kube-system --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: admin-user roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: admin-user namespace: kube-system  Apply the configuration with KubeCtl: kubectl apply -f ~/Projects/k8s-cluster/dashboard-adminuser.yaml\nGet the Token for the newly created user: kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')\nNow just paste the token into the k8s Dashboard login screen under the \u0026ldquo;token\u0026rdquo; option.\nDONE!  At least I thought I was done.\nWork VPN issues This should not apply to you.\nAs I have more than one private network on my LAN, when I activate my work VPN it only allows local traffic on one of my subnets. So to be able to reach the k8s cluster in the other private IP space while the work VPN client is \u0026ldquo;active\u0026rdquo;, I have to use a \u0026ldquo;bastion host\u0026rdquo; on my laptop\u0026rsquo;s subnet that can also \u0026ldquo;talk\u0026rdquo; to the cluster\u0026rsquo;s network.\nTo view k8s dashboard while connected to work VPN I have to: # create local tunnel using a bastion server ssh -L 6443:10.20.30.3:6443 192.168.9.107 -N # ------------- # now I can open the k8s Dashboard on my laptop: # # when VPN is active. # - https://localhost:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy # # when VPN is NOT active: # - - https://10.20.30.3:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy  ","date":1563495120,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563495120,"objectID":"a91b6874f2f3caace86d3bbf07828c88","permalink":"https://www.mikecone.us/post/home_projects/t620_kubernetes-cluster/","publishdate":"2019-07-19T00:12:00Z","relpermalink":"/post/home_projects/t620_kubernetes-cluster/","section":"post","summary":"Using Ansible to build Kubernetes on 5 HP t620+ thin clients!","tags":["K8s","Ansible"],"title":"ConeNet Kubernetes","type":"post"},{"authors":[],"categories":[],"content":"While researching Ansible and how to use it for a project at work, I watched this video from Jeff Geerling and I had to build my own Raspberry Pi cluster.\nThen I thought why not get the kids involved and make this one a family project instead.\n Here\u0026rsquo;s my son helping assemble the cluster. The poor guy had fallen on the playground at school and broken his arm.\nMy kids with the assembled cluster before wiring.\nUsing some perf board and my soldering iron I put together some multi-colored leds to control via Ansible playbooks.\nLeds installed.\nNo project should be without a case!\nKey Features  Stand Alone. Requires no internet connection once software is installed. Great for giving demos. Single power supply for the entire cluster including networking. Clutter is reduced. WiFi Client for using in demos and talks. (TP-Link WR702N) Easy to transport and store Can connect to the Internet when needed via Ethernet cable or Wifi.  Components The items I used to build my cluster are mostly still available, here is the Amazon Wish List that I created when I was building mine.\nNote: I did modify the power cables so that each USB power port powers 2 of the Raspberry Pi\u0026rsquo;s. (Y-cable)\n","date":1464480779,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1464480779,"objectID":"3c9e84599f43f05d096def780d592b9c","permalink":"https://www.mikecone.us/post/home_projects/cloud-in-a-box/","publishdate":"2016-05-29T00:12:59Z","relpermalink":"/post/home_projects/cloud-in-a-box/","section":"post","summary":"This is a Raspberry Pi cluster project my kids and I built when I was learning about Ansible automations.","tags":["Raspberry Pi"],"title":"Cloud in a Box","type":"post"}]